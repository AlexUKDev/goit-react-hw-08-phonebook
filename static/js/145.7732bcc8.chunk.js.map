{"version":3,"file":"static/js/145.7732bcc8.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.Styled.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.Styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.Styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectAllContacts, selectFilter],\n  (contacts, filterValue) => {\n    const normalizeFilterValue = filterValue.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilterValue)\n    );\n  }\n);\n","import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport AddRoundedIcon from '@mui/icons-material/AddRounded';\n\nimport { Notify } from 'notiflix';\n// import { Wrapper } from './ContactForm.Styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        break;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    for (const contactItem of contacts) {\n      const normalizeStateName = contactItem.name.toLowerCase();\n      const normalizeFormName = name.toLowerCase();\n\n      if (normalizeStateName === normalizeFormName) {\n        return Notify.warning(`${contactItem.name}, is already in contacts!'`);\n      }\n    }\n\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <>\n      <Box component=\"form\" onSubmit={handleFormSubmit}>\n        <FormControl sx={{ width: '25ch' }}>\n          <TextField\n            onChange={handleChange}\n            label=\"Name\"\n            variant=\"outlined\"\n            color=\"success\"\n            id=\"outlined-basic\"\n            sx={{ mb: 2 }}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n            value={name}\n            required\n          />\n\n          <TextField\n            name=\"number\"\n            type=\"tel\"\n            onChange={handleChange}\n            value={number}\n            label=\"Number\"\n            variant=\"outlined\"\n            color=\"success\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            id=\"outlined-basic\"\n            sx={{ mb: 1 }}\n            maxLength=\"16\"\n            required\n          />\n        </FormControl>\n        <Stack>\n          <Button\n            type=\"submit\"\n            variant=\"outlined\"\n            color=\"success\"\n            size=\"small\"\n            endIcon={<AddRoundedIcon />}\n          >\n            Add contact\n          </Button>\n        </Stack>\n      </Box>\n    </>\n  );\n};\n\n// <SubmitBtn type=\"submit\">Add contact</SubmitBtn>;\n","import styled from 'styled-components';\n\nexport const TextWrap = styled.span`\n  margin: 0px 20px 0px 0px;\n`;\n\nexport const Item = styled.li`\n  width: 100%;\n  font-size: 20px;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const DelateBtn = styled.button`\n  display: inline-block;\n  padding: 5px;\n  vertical-align: middle;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.6);\n\n  border-radius: 8px;\n  font-weight: 700;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    cursor: pointer;\n    color: rgba(0, 0, 0, 1);\n    scale: 0.95;\n    background-color: tomato;\n  }\n`;\n","import { useDispatch } from 'react-redux';\n\nimport { removeContact } from 'redux/contacts/operations';\nimport { TextWrap, Item, DelateBtn } from './ContactItem.Styled';\n\nimport PropTypes from 'prop-types';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <TextWrap>{name}</TextWrap>\n      <TextWrap>{number}</TextWrap>\n      <DelateBtn\n        id={id}\n        type=\"button\"\n        onClick={() => dispatch(removeContact(id))}\n      >\n        Delate\n      </DelateBtn>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { useDispatch } from 'react-redux';\n\nimport { updateFilterValue } from 'redux/contacts/slice';\n\nimport TextField from '@mui/material/TextField';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterHandler = ({ currentTarget: { value } }) => {\n    dispatch(updateFilterValue(value.toLocaleLowerCase()));\n  };\n\n  return (\n    <>\n      <TextField\n        onChange={filterHandler}\n        id=\"outlined-basic\"\n        label=\"Search contact by name\"\n        variant=\"outlined\"\n        color=\"success\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ListWrap = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  padding: 45px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n`;\n\nexport const InfoText = styled.span`\n  margin-top: 30px;\n  font-size: 14px;\n  text-align: center;\n  color: rgba(0, 0, 0, 0.5);\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport {\n  selectAllContacts,\n  selectFilteredContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { ListWrap, InfoText, Wrapper } from './ContactList.Styled';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const visibleContacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <Filter />\n\n      {!!(!isLoading && !contacts.length) && (\n        <InfoText>\n          Your contact list is empty. Please add a new contact to see it in the\n          saved list.\n        </InfoText>\n      )}\n\n      <ListWrap>\n        {isLoading && !error && <CircularProgress color=\"success\" />}\n\n        {!isLoading &&\n          visibleContacts.map(contact => (\n            <ContactItem\n              key={contact.id}\n              name={contact.name}\n              number={contact.number}\n              id={contact.id}\n            />\n          ))}\n      </ListWrap>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n\n  justify-content: space-around;\n  margin-top: 30px;\n`;\n\nexport const FormWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n`;\n","import { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactList/ContactList';\n\nimport { Wrapper } from 'pages/Contacts/Contacts.Styled';\n\nexport default function Contacts() {\n  return (\n    <Wrapper>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      <ContactsList />\n      <ContactForm />\n    </Wrapper>\n  );\n}\n"],"names":["selectAllContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","filterValue","normalizeFilterValue","toLowerCase","contact","name","includes","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","handleChange","target","value","Box","component","onSubmit","e","preventDefault","contactItem","Notify","addContact","FormControl","sx","width","TextField","onChange","label","variant","color","id","mb","type","pattern","title","required","maxLength","Stack","Button","size","endIcon","AddRounded","TextWrap","styled","Item","DelateBtn","ContactItem","onClick","removeContact","Filter","currentTarget","updateFilterValue","toLocaleLowerCase","Wrapper","ListWrap","InfoText","ContactsList","visibleContacts","useEffect","fetchContacts","length","CircularProgress","map","Contacts","Helmet"],"sourceRoot":""}